{"version":3,"sources":["webpack://@WiwatSrt/best-answer/webpack/bootstrap","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['app']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['extend']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['components/CommentPost']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['models/Discussion']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['Model']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['components/Button']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['components/DiscussionPage']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['components/Post']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['components/Badge']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['helpers/icon']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['components/PostMeta']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['helpers/username']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['helpers/userOnline']\"","webpack://@WiwatSrt/best-answer/./src/forum/index.js","webpack://@WiwatSrt/best-answer/./src/forum/addBestAnswerAction.js","webpack://@WiwatSrt/best-answer/./src/forum/addBestAnswerAttribute.js","webpack://@WiwatSrt/best-answer/./src/forum/addBestAnswerBadge.js","webpack://@WiwatSrt/best-answer/./src/forum/addBestAnswerFirstPost.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","app","initializers","add","Discussion","bestAnswerPost","Model","hasOne","canSelectBestAnswer","attribute","canSelectBestAnswerOwnPost","extend","CommentPost","items","post","this","props","discussion","isBestAnswer","pushAttributes","isHidden","session","user","id","data","relationships","Button","component","children","translator","trans","className","onclick","save","bestAnswerPostId","then","current","DiscussionPage","stream","update","redraw","route","posts","PostComponent","attrs","has","Badge","type","icon","label","number","userOnline","href","config","username","PostMeta","data-number","trust","contentHtml"],"mappings":"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","file":"forum.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n","module.exports = flarum.core.compat['app'];","module.exports = flarum.core.compat['extend'];","module.exports = flarum.core.compat['components/CommentPost'];","module.exports = flarum.core.compat['models/Discussion'];","module.exports = flarum.core.compat['Model'];","module.exports = flarum.core.compat['components/Button'];","module.exports = flarum.core.compat['components/DiscussionPage'];","module.exports = flarum.core.compat['components/Post'];","module.exports = flarum.core.compat['components/Badge'];","module.exports = flarum.core.compat['helpers/icon'];","module.exports = flarum.core.compat['components/PostMeta'];","module.exports = flarum.core.compat['helpers/username'];","module.exports = flarum.core.compat['helpers/userOnline'];","import app from 'flarum/app';\nimport Discussion from 'flarum/models/Discussion';\nimport Model from 'flarum/Model';\nimport addBestAnswerAction from './addBestAnswerAction';\nimport addBestAnswerAttribute from './addBestAnswerAttribute';\nimport addBestAnswerBadge from './addBestAnswerBadge';\nimport addBestAnswerFirstPost from './addBestAnswerFirstPost';\n\napp.initializers.add('wiwatSrt-bestAnswer', function() {\n    Discussion.prototype.bestAnswerPost = Model.hasOne('bestAnswerPost');\n    Discussion.prototype.canSelectBestAnswer = Model.attribute('canSelectBestAnswer');\n    Discussion.prototype.canSelectBestAnswerOwnPost = Model.attribute('canSelectBestAnswerOwnPost');\n\n    addBestAnswerAction();\n    addBestAnswerAttribute();\n    addBestAnswerBadge();\n    addBestAnswerFirstPost();\n});\n","import app from 'flarum/app';\nimport { extend } from 'flarum/extend';\nimport Button from 'flarum/components/Button';\nimport CommentPost from 'flarum/components/CommentPost';\nimport DiscussionPage from 'flarum/components/DiscussionPage';\n\nexport default function() {\n    extend(CommentPost.prototype, 'actionItems', function (items) {\n        var post = this.props.post;\n        var discussion = this.props.post.discussion();\n        var isBestAnswer = (discussion.bestAnswerPost() && discussion.bestAnswerPost() == post);\n\n        post.pushAttributes({isBestAnswer});\n\n        if (post.isHidden() || !discussion.canSelectBestAnswer() || !app.session.user || discussion.attribute('startUserId') != app.session.user.id()) return;\n        if (!isBestAnswer && !discussion.canSelectBestAnswerOwnPost() && discussion.attribute('startUserId') == post.data.relationships.user.data.id) return;\n\n        items.add('bestAnswer', Button.component({\n            children: app.translator.trans(isBestAnswer ? 'flarum-best-answer.forum.remove_best_answer' : 'flarum-best-answer.forum.this_best_answer'),\n            className: 'Button Button--link',\n            onclick: function onclick() {\n                isBestAnswer = !isBestAnswer;\n                discussion.save({\n                    bestAnswerPostId: isBestAnswer ? post.id() : 0,\n                    relationships: isBestAnswer ? {bestAnswerPost: post} : delete discussion.data.relationships.bestAnswerPost\n                }).then(() => {\n                    if (app.current instanceof DiscussionPage) {\n                        app.current.stream.update();\n                    }\n                    m.redraw();\n                });\n                if(isBestAnswer) {\n                    m.route(app.route.post(discussion.posts()[0]));\n                }\n            }\n        }));\n    });\n}\n","import app from 'flarum/app';\r\nimport { extend } from 'flarum/extend';\r\nimport CommentPost from 'flarum/components/CommentPost';\r\nimport PostComponent from 'flarum/components/Post';\r\n\r\nexport default function() {\r\n    extend(CommentPost.prototype, 'headerItems', function (items) {\r\n        if (this.props.post.discussion().bestAnswerPost() == this.props.post && !this.props.post.isHidden()) {\r\n            items.add('isBestAnswer', app.translator.trans('flarum-best-answer.forum.best_answer_button'));\r\n        }\r\n    });\r\n\r\n    extend(PostComponent.prototype, 'attrs', function (attrs) {\r\n        if (this.props.post.discussion().bestAnswerPost() == this.props.post && !this.props.post.isHidden()) {\r\n            attrs.className += ' Post--bestAnswer';\r\n        }\r\n    });\r\n}","import app from 'flarum/app';\r\nimport { extend } from 'flarum/extend';\r\nimport Badge from 'flarum/components/Badge';\r\nimport Discussion from 'flarum/models/Discussion';\r\n\r\nexport default function() {\r\n    extend(Discussion.prototype, 'badges', function (items) {\r\n        if (this.bestAnswerPost() && !items.has('hidden')) {\r\n            items.add('bestAnswer', m(Badge, {\r\n                type: 'bestAnswer',\r\n                icon: 'fas fa-check',\r\n                label: app.translator.trans('flarum-best-answer.forum.best_answer')\r\n            }));\r\n        }\r\n    });\r\n}","import app from 'flarum/app';\nimport { extend } from 'flarum/extend';\nimport CommentPost from 'flarum/components/CommentPost';\nimport icon from 'flarum/helpers/icon';\nimport PostMeta from 'flarum/components/PostMeta';\nimport username from 'flarum/helpers/username';\nimport userOnline from 'flarum/helpers/userOnline';\n\nexport default function() {\n    extend(CommentPost.prototype, 'footerItems', function (items) {\n\n        var discussion = this.props.post.discussion();\n\n        if (discussion.bestAnswerPost() && this.props.post.number() == 1 && !this.props.post.isHidden()) {\n            var post = discussion.bestAnswerPost();\n            if (post.isHidden()) return;\n            var user = discussion.bestAnswerPost().user();\n            items.add('bestAnswerPost', m(\n                'div',\n                {className: 'CommentPost'},\n                m(\".Post-header\",\n                    m('ul',\n                        m('li',\n                            {className: 'item-user'},\n                            m('.PostUser',\n                                userOnline(user),\n                                m('h3',\n                                    m(\n                                        'a',\n                                        {href: app.route.user(user), config: m.route},\n                                        username(user)\n                                    )\n                                )\n                            )\n                        ), m('li',\n                            {className: 'item-meta'},\n                            PostMeta.component({post})\n                        ), m('li',\n                            {className: 'item-bestAnswerButton'}, m('a',\n                                {\n                                    href: app.route.post(post),\n                                    config: m.route,\n                                    'data-number': post.number()\n                                },\n                                icon('fas fa-check'),\n                                app.translator.trans('flarum-best-answer.forum.best_answer_button')\n                            )\n                        )\n                    )\n                ),\n                m(\".Post-body\",\n                    m.trust(discussion.bestAnswerPost().contentHtml())\n                )\n            ), -10);\n        }\n    });\n}\n"],"sourceRoot":""}