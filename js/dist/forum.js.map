{"version":3,"sources":["webpack://@WiwatSrt/best-answer/webpack/bootstrap","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['app']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['extend']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['models/Discussion']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['components/CommentPost']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['Model']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['components/Button']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['components/DiscussionPage']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['components/Post']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['components/Badge']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['helpers/icon']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['components/PostMeta']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['helpers/username']\"","webpack://@WiwatSrt/best-answer/external \"flarum.core.compat['helpers/userOnline']\"","webpack://@WiwatSrt/best-answer/./src/forum/index.js","webpack://@WiwatSrt/best-answer/./src/forum/addBestAnswerAction.js","webpack://@WiwatSrt/best-answer/./src/forum/addBestAnswerAttribute.js","webpack://@WiwatSrt/best-answer/./src/forum/addBestAnswerBadge.js","webpack://@WiwatSrt/best-answer/./src/forum/addBestAnswerFirstPost.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","app","initializers","add","Discussion","bestAnswerPost","Model","hasOne","bestAnswerUser","startUserId","attribute","Number","firstPostId","canSelectBestAnswer","extend","CommentPost","items","post","this","props","discussion","isBestAnswer","id","pushAttributes","isHidden","number","session","user","forum","Button","component","children","translator","trans","className","onclick","save","bestAnswerPostId","bestAnswerUserId","relationships","data","then","current","DiscussionPage","stream","update","redraw","route","posts","PostComponent","attrs","has","Badge","type","icon","label","thisPost","userOnline","href","config","username","PostMeta","data-number","trust","contentHtml"],"mappings":"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","file":"forum.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n","module.exports = flarum.core.compat['app'];","module.exports = flarum.core.compat['extend'];","module.exports = flarum.core.compat['models/Discussion'];","module.exports = flarum.core.compat['components/CommentPost'];","module.exports = flarum.core.compat['Model'];","module.exports = flarum.core.compat['components/Button'];","module.exports = flarum.core.compat['components/DiscussionPage'];","module.exports = flarum.core.compat['components/Post'];","module.exports = flarum.core.compat['components/Badge'];","module.exports = flarum.core.compat['helpers/icon'];","module.exports = flarum.core.compat['components/PostMeta'];","module.exports = flarum.core.compat['helpers/username'];","module.exports = flarum.core.compat['helpers/userOnline'];","import app from 'flarum/app';\nimport Discussion from 'flarum/models/Discussion';\nimport Model from 'flarum/Model';\nimport addBestAnswerAction from './addBestAnswerAction';\nimport addBestAnswerAttribute from './addBestAnswerAttribute';\nimport addBestAnswerBadge from './addBestAnswerBadge';\nimport addBestAnswerFirstPost from './addBestAnswerFirstPost';\n\napp.initializers.add('wiwatSrt-bestAnswer', function() {\n    Discussion.prototype.bestAnswerPost = Model.hasOne('bestAnswerPost');\n    Discussion.prototype.bestAnswerUser = Model.hasOne('bestAnswerUser');\n    Discussion.prototype.startUserId = Model.attribute('startUserId', Number);\n    Discussion.prototype.firstPostId = Model.attribute('firstPostId', Number);\n    Discussion.prototype.canSelectBestAnswer = Model.attribute('canSelectBestAnswer');\n\n    addBestAnswerAction();\n    addBestAnswerAttribute();\n    addBestAnswerBadge();\n    addBestAnswerFirstPost();\n});\n","import app from 'flarum/app';\nimport { extend } from 'flarum/extend';\nimport Button from 'flarum/components/Button';\nimport CommentPost from 'flarum/components/CommentPost';\nimport DiscussionPage from 'flarum/components/DiscussionPage';\n\nexport default function() {\n    extend(CommentPost.prototype, 'actionItems', function (items) {\n        const post = this.props.post;\n        const discussion = this.props.post.discussion();\n        let isBestAnswer = (discussion.bestAnswerPost() && discussion.bestAnswerPost().id() === post.id());\n\n        post.pushAttributes({isBestAnswer});\n\n        if (post.isHidden() || post.number() === 1 || !discussion.canSelectBestAnswer() || !app.session.user) return;\n\n        if (!isBestAnswer && !app.forum.attribute('canSelectBestAnswerOwnPost') && post.user().id() === app.session.user.id()) return;\n\n        items.add('bestAnswer', Button.component({\n            children: app.translator.trans(isBestAnswer ? 'flarum-best-answer.forum.remove_best_answer' : 'flarum-best-answer.forum.this_best_answer'),\n            className: 'Button Button--link',\n            onclick: function onclick() {\n                isBestAnswer = !isBestAnswer;\n                discussion.save({\n                    bestAnswerPostId: isBestAnswer ? post.id() : 0,\n                    bestAnswerUserId: app.session.user.id(),\n                    relationships: isBestAnswer ? {bestAnswerPost: post, bestAnswerUser: app.session.user} : delete discussion.data.relationships.bestAnswerPost\n                }).then(() => {\n                    if (app.current instanceof DiscussionPage) {\n                        app.current.stream.update();\n                    }\n                    m.redraw();\n                });\n                if(isBestAnswer) {\n                    m.route(app.route.post(discussion.posts()[0]));\n                }\n            }\n        }));\n    });\n}\n","import app from 'flarum/app';\nimport { extend } from 'flarum/extend';\nimport CommentPost from 'flarum/components/CommentPost';\nimport PostComponent from 'flarum/components/Post';\n\nexport default function() {\n    extend(CommentPost.prototype, 'headerItems', function (items) {\n        const post = this.props.post;\n\n        if (post.discussion().bestAnswerPost() && post.discussion().bestAnswerPost().id() === post.id() && !post.isHidden()) {\n            items.add('isBestAnswer', app.translator.trans('flarum-best-answer.forum.best_answer_button', { user: post.discussion().bestAnswerUser() }));\n        }\n    });\n\n    extend(PostComponent.prototype, 'attrs', function (attrs) {\n        const post = this.props.post;\n\n        if (post.discussion().bestAnswerPost() && post.discussion().bestAnswerPost().id() === post.id() && !post.isHidden()) {\n            attrs.className += ' Post--bestAnswer';\n        }\n    });\n}","import app from 'flarum/app';\nimport { extend } from 'flarum/extend';\nimport Badge from 'flarum/components/Badge';\nimport Discussion from 'flarum/models/Discussion';\n\nexport default function() {\n    extend(Discussion.prototype, 'badges', function (items) {\n        if (this.bestAnswerPost() && !items.has('hidden')) {\n            items.add('bestAnswer', m(Badge, {\n                type: 'bestAnswer',\n                icon: 'fas fa-check',\n                label: app.translator.trans('flarum-best-answer.forum.best_answer')\n            }));\n        }\n    });\n}","import app from 'flarum/app';\nimport { extend } from 'flarum/extend';\nimport CommentPost from 'flarum/components/CommentPost';\nimport icon from 'flarum/helpers/icon';\nimport PostMeta from 'flarum/components/PostMeta';\nimport username from 'flarum/helpers/username';\nimport userOnline from 'flarum/helpers/userOnline';\n\nexport default function() {\n    extend(CommentPost.prototype, 'footerItems', function (items) {\n        const thisPost = this.props.post;\n        const discussion = thisPost.discussion();\n\n        if (discussion.bestAnswerPost() && thisPost.number() === 1 && !thisPost.isHidden()) {\n            const post = discussion.bestAnswerPost();\n\n            if (post.isHidden()) return;\n\n            const user = post.user();\n\n            items.add('bestAnswerPost',\n                <div className=\"CommentPost\">\n                    <div className=\"Post-header\">\n                        <ul>\n                            <li className=\"item-user\">\n                                <div className=\"PostUser\">\n                                    {userOnline(user)}\n                                    <h3><a href={app.route.user(user)} config={m.route}>{username(user)}</a></h3>\n                                </div>\n                            </li>\n                            <li className=\"item-meta\">\n                                {PostMeta.component({ post })}\n                            </li>\n                            <li className=\"item-bestAnswerButton\">\n                                <a href={app.route.post(post)} config={m.route} data-number={post.number()}>\n                                    {icon('fas fa-check')}\n                                    {app.translator.trans('flarum-best-answer.forum.best_answer_button', { user: discussion.bestAnswerUser() })}\n                                </a>\n                            </li>\n                        </ul>\n                    </div>\n                    <div className=\"Post-body\">\n                        {m.trust(post.contentHtml())}\n                    </div>\n                </div>,\n            -10);\n        }\n    });\n}\n"],"sourceRoot":""}